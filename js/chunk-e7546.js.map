{"version":3,"sources":["webpack://movie-list/./src/movie/list/index.module.less?bbc3","webpack://movie-list/./src/movie/list/index.js","webpack://movie-list/./src/movie/pager/index.module.less?10e2","webpack://movie-list/./src/movie/pager/index.js","webpack://movie-list/./src/api/movies.js","webpack://movie-list/./src/movie/index.js"],"names":["container","createMovieTags","movies","empty","result","map","m","url","cover","title","rate","join","$","styles","html","addClass","appendTo","getMovies","page","size","axios","params","then","resp","data","createPagers","limit","total","totalPage","Math","ceil","minPage","maxPage","createTag","i","text","status","targetPage","span","attr","on","movieList","movieTotal","init"],"mappings":"qLACA,QAA4B,wBCK5B,IAAIA,EAWG,SAASC,EAAgBC,GAC5BF,EAAUG,QACV,IAAMC,EAASF,EAAOG,KAAI,SAAAC,GAAC,kCDlB4B,0BCkB5B,gCAEZA,EAAEC,IAFU,iDAGXD,EAAEE,MAHS,gDAKZF,EAAEC,IALU,qDDlB8D,0BCkB9D,aAMUD,EAAEG,MANZ,iDDlB+F,wBCkB/F,kBAQUH,EAAEI,KARZ,iCAUxBC,KAAK,IACRC,IAAE,IAAD,OAAKC,IAAoBC,KAAKV,GAtB/BJ,EAAYY,IAAE,SAASG,SAASF,GAAkBG,SAAS,QCP/D,SAAgB,MAAQ,0BAA0B,SAAW,0BAA0B,OAAS,yB,ICI5FhB,E,sUCHG,SAAeiB,EAAtB,oC,iDAAO,WAAyBC,EAAMC,GAA/B,gGACUC,QAAU,cAAe,CAClCC,OAAQ,CACJH,OACAC,UAELG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,QANlB,oF,kVDmBA,SAASC,EAAaP,EAAMQ,EAAOC,GACtC3B,EAAUG,QACV,IACMyB,EAAYC,KAAKC,KAAKH,EAAQD,GAChCK,EAAUb,EAAO,EACjBc,EAAUD,EAHG,EAGkB,EAC/BA,GAAW,IAEXC,EANa,GAKbD,EAAU,GACqB,GAE/BC,GAAWJ,IACXG,EAAUH,EATG,EASoB,EACjCI,EAAUJ,GAKVV,GAAQ,GACRe,EAAU,KAAM,WAAY,GAC5BA,EAAU,MAAO,WAAYf,EAAO,KAEpCe,EAAU,KAAM,GAAI,GACpBA,EAAU,MAAO,GAAIf,EAAO,IAIhC,IAAK,IAAIgB,EAAIH,EAASG,GAAKF,EAASE,IAC5BA,IAAMhB,EACNe,EAAUf,EAAM,SAAUA,GAE1Be,EAAUC,EAAG,GAAIA,GAmBzB,SAASD,EAAUE,EAAMC,EAAQC,GAC7B,IAAMC,EAAO1B,IAAE,UAAUuB,KAAKA,GAAMI,KAAK,YAA5B,UAA4CF,IAActB,SAASF,EAAOuB,IAASpB,SAAShB,GAC1F,KAAXoC,GACAE,EAAKE,GAAG,QAAR,2BAAiB,mHAEMvB,EAAUoB,EAAY,IAF5B,OAIbpC,GAFMsB,EAFO,QAIQC,KAAKiB,WAE1BhB,EAAaY,EAAY,GAAId,EAAKC,KAAKkB,YAN1B,4CAjBrBxB,GAAQU,GACRK,EAAU,MAAO,WAAYf,EAAO,GACpCe,EAAU,KAAM,WAAYL,KAE5BK,EAAU,MAAO,GAAIf,EAAO,GAC5Be,EAAU,KAAM,GAAIL,I,6WEvD5B,mHACuBX,EAAU,EAAG,IADpC,OAEIhB,GADMsB,EADV,QAEyBC,KAAKiB,WAC1BhB,EAAa,EAAG,GAAIF,EAAKC,KAAKkB,YAHlC,4C,sBFII1C,EAAYY,IAAE,SAASG,SAASF,SAAcG,SAAS,Q,mCEG3D2B","file":"js/chunk-e7546.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"kOrlLuNtBylKs91raZIOU\",\"item\":\"_1EwjUzNVq8tXwfIg7eh5n0\",\"title\":\"_3pYTYHeeDH0bFkeCn3ld06\",\"rate\":\"nm_NW-jBa8IeDMNfp4JFo\"};","import $ from 'jquery'\r\nimport styles from './index.module.less'\r\n/**\r\n * 初始化函数，负责创建容器\r\n */\r\n\r\nlet container;\r\nfunction init() {\r\n    container = $('<div>').addClass(styles.container).appendTo('#app')\r\n}\r\n\r\ninit();\r\n\r\n/**\r\n * 根据传入的电影数组，创建元素，填充到容器中\r\n * @params movies 电影数组\r\n */\r\nexport function createMovieTags(movies) {\r\n    container.empty()\r\n    const result = movies.map(m => `\r\n    <div class=\"${styles.item}\">\r\n        <a href=\"${m.url}\" target=\"_blank\">\r\n        <img src=\"${m.cover}\" />\r\n        </a>\r\n        <a href=\"${m.url}\" target=\"_blank\">\r\n            <p class=\"${styles.title}\">${m.title}</p>\r\n        </a>\r\n        <p class=\"${styles.rate}\">评分<i>${m.rate}</i></p>\r\n    </div>\r\n    `).join('')\r\n    $(`.${styles.container}`).html(result)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"pager\":\"_1VN1YU2G2lDHkQWRtrceUO\",\"disabled\":\"_2dd1ehDdnLaT1lF72w3i1q\",\"active\":\"kLc696jYNRmHedH9tJqp3\"};","import $ from 'jquery'\r\nimport styles from './index.module.less'\r\nimport { getMovies } from '@/api/movies'\r\nimport { createMovieTags } from '../list'\r\n\r\nlet container\r\n/**\r\n * 初始化函数，负责创建容器\r\n */\r\nfunction init() {\r\n    container = $('<div>').addClass(styles.pager).appendTo('#app')\r\n}\r\n\r\ninit();\r\n\r\n/**\r\n * 根据传入的页码、页容量、总记录数，创建分页区域的标签\r\n * @params page 页码\r\n * @params limit 页容量\r\n * @params total 总页数\r\n */\r\nexport function createPagers(page, limit, total) {\r\n    container.empty()\r\n    const oncePage = 9\r\n    const totalPage = Math.ceil(total / limit)\r\n    let minPage = page - (oncePage - 1) / 2\r\n    let maxPage = minPage + oncePage - 1\r\n    if (minPage <= 1) {\r\n        minPage = 1\r\n        maxPage = minPage + oncePage - 1\r\n    }\r\n    if (maxPage >= totalPage) {\r\n        minPage = totalPage - oncePage + 1\r\n        maxPage = totalPage\r\n    }\r\n\r\n    //1. 创建首页标签\r\n    //2. 创建上一页标签\r\n    if (page <= 1) {\r\n        createTag('首页', 'disabled', 1)\r\n        createTag('上一页', 'disabled', page - 1)\r\n    } else {\r\n        createTag('首页', '', 1)\r\n        createTag('上一页', '', page - 1)\r\n    }\r\n\r\n    //3. 创建数字页码标签\r\n    for (let i = minPage; i <= maxPage; i++) {\r\n        if (i === page) {\r\n            createTag(page, 'active', page)\r\n        } else {\r\n            createTag(i, '', i)\r\n        }\r\n    }\r\n    //4. 创建下一页标签\r\n    //5. 创建尾页标签\r\n    if (page >= totalPage) {\r\n        createTag('下一页', 'disabled', page + 1)\r\n        createTag('尾页', 'disabled', totalPage)\r\n    } else {\r\n        createTag('下一页', '', page + 1)\r\n        createTag('尾页', '', totalPage)\r\n    }\r\n\r\n    /**\r\n     * 辅助函数，负责帮忙创建一个页码标签\r\n     * @params text 标签的文本\r\n     * @params status 标签的状态，空字符串-普通状态，disabled-禁用状态，active-选中状态\r\n     * @params targetPage 标签跳转页码\r\n     */\r\n    function createTag(text, status, targetPage) {\r\n        const span = $('<span>').text(text).attr('data-page', `${targetPage}`).addClass(styles[status]).appendTo(container)\r\n        if (status === '') {\r\n            span.on('click', async () => {\r\n                // 重新拿数据\r\n                const resp = await getMovies(targetPage, 30)\r\n                // 重新生成列表\r\n                createMovieTags(resp.data.movieList) // 初始化电影列表\r\n                // 重新生成分页区\r\n                createPagers(targetPage, 30, resp.data.movieTotal) // 初始化分页\r\n            })\r\n        }\r\n    }\r\n}","import axios from 'axios'\r\n\r\nexport async function getMovies(page, size) {\r\n    return await axios.get('/api/movies', {\r\n        params: {\r\n            page,\r\n            size\r\n        }\r\n    }).then(resp => resp.data)\r\n}","import './list'\r\nimport { createMovieTags } from './list'\r\nimport './pager'\r\nimport { createPagers } from './pager'\r\nimport { getMovies } from '@/api/movies.js'\r\n\r\nasync function init() {\r\n    const resp = await getMovies(1, 30)\r\n    createMovieTags(resp.data.movieList) // 初始化电影列表\r\n    createPagers(1, 30, resp.data.movieTotal) // 初始化分页\r\n}\r\n\r\n\r\ninit()"],"sourceRoot":""}